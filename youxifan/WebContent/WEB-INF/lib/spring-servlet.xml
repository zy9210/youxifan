<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="   
        http://www.springframework.org/schema/beans    
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
        http://www.springframework.org/schema/context    
        http://www.springframework.org/schema/context/spring-context-3.0.xsd   
        http://www.springframework.org/schema/mvc    
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">  

       


	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- 简写：  <mvc:annotation-driven />   
		<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	-->

	<!-- 把标记了@Controller注解的类转换为bean  -->
	<!-- 自动扫描所有注解该路径   --> 
	<context:component-scan
		base-package="com.youxifan.controller,com.youxifan.service" />

<!--   静态资源处理
	<mvc:default-servlet-handler/>
	<mvc:resources mapping="/images/**" location="/images/" />
-->	
	<mvc:default-servlet-handler/>

	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >  
	    <property name="messageConverters">  
	        <list>  
	            <ref bean="mappingJacksonHttpMessageConverter"/>  
	        </list>  
	    </property>  
	</bean>  
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
	    <property name="supportedMediaTypes">  
	        <list>  
	            <value>text/html;charset=UTF-8</value>  
	        </list>  
	    </property>  
	</bean> 

	<!-- 配置多请求数据类型，如json xml-->

	<bean id="annotationMethodHandlerAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >
		<property name="messageConverters">
			<list>
			
				<!-- 解析json请求数据，将json转换为java对象-->
				<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
				
				<!-- 解析xml请求数据，将xml转换为java对象
				<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
					<constructor-arg> 
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
							<property name="streamDriver" >
								<bean class="com.thoughtworks.xstream.io.xml.DomDriver"/>
							</property> 
							<property name="autodetectAnnotations" ><value>true</value></property>  -->
							<!--可以与xml互换的对象，需要使用XStream的注解，注解的使用方法请参XStream官网
							<property name="annotatedClasses">
								<list>
									<value>com.xxx.XxxxDTO</value>
								</list>
							</property>
						</bean>
					</constructor-arg>
				</bean>   -->
				
				<bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
	
				<!--可以增加其他数据类型,请参考spring的API-->
			</list>
		</property>
	</bean>     






	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="defaultContentType" value="application/json" /> 
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html" />
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />
            </map>
        </property>
        <property name="viewResolvers">
            <list>
            	<!--  FreeMarker
                <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
                <property name="cache" value="true"/>
                <property name="prefix" value=""/>
                <property name="suffix" value=".ftl"/>
                <property name="exposeSpringMacroHelpers" value="true"/>
                </bean>
                -->
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass"
                        value="org.springframework.web.servlet.view.JstlView" />
                    <property name="prefix" value="/WEB-INF/jsp/" />
                    <property name="suffix" value=".jsp" />
                </bean>

				<!-- 可加入其他视图技术如 volacity jstl等-->                        
            </list>
        </property>
        <property name="defaultViews">
            <list>

                <!-- 输出为JSON数据-->
                <bean
                    class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                </bean>

                <!-- 输出为xml数据
                <bean id="marshallingView" class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <property name="marshaller">
                        <bean id="xStreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller" >                          
                            <property name="autodetectAnnotations" value="true"/>
                        </bean>
                    </property>
                    <property name="contentType" value="application/xml" />                    
                </bean>   
                -->              
            </list>
        </property>
        
    </bean>
    
    
    
    
    
    
    
    
    
 

	<!--  这个同上 可能 是处理文件上传的
		<bean id="multipartResolver"  
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<property name="defaultEncoding" value="UTF-8" />   
		<property name="uploadTempDir" value="resources/attach/temp" />   
		</bean> 
	-->
</beans>